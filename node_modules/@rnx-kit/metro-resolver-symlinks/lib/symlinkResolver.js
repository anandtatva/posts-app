"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeResolver = void 0;
const tools_node_1 = require("@rnx-kit/tools-node");
const resolver_1 = require("./resolver");
const remapImportPath_1 = require("./utils/remapImportPath");
function makeResolver({ remapModule = (_, moduleName, __) => moduleName, } = {}) {
    const metroResolver = (0, resolver_1.getMetroResolver)();
    const remappers = [remapModule, resolver_1.remapReactNativeModule, resolver_1.resolveModulePath];
    const symlinkResolver = (context, moduleName, platform) => {
        if (!platform) {
            throw new Error("No platform was specified");
        }
        let resolve = metroResolver;
        const resolveRequest = context.resolveRequest;
        if (resolveRequest === symlinkResolver) {
            delete context.resolveRequest;
        }
        else if (resolveRequest) {
            resolve = resolveRequest;
        }
        try {
            const modifiedModuleName = remappers.reduce((modifiedName, remap) => remap(context, modifiedName, platform), moduleName);
            return resolve(context, (0, tools_node_1.normalizePath)(modifiedModuleName), platform, null);
        }
        finally {
            if (!context.resolveRequest) {
                // Restoring `resolveRequest` must happen last
                context.resolveRequest = resolveRequest;
            }
        }
    };
    return symlinkResolver;
}
exports.makeResolver = makeResolver;
makeResolver.remapImportPath = remapImportPath_1.remapImportPath;
//# sourceMappingURL=symlinkResolver.js.map